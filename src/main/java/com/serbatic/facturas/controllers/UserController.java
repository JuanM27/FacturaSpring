package com.serbatic.facturas.controllers;

import org.apache.velocity.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.serbatic.facturas.accessingData.User;
import com.serbatic.facturas.accessingData.UserRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "User saved";
  }

  @PatchMapping(path = "/{id}") // Map ONLY PATCH Requests
  public ResponseEntity<User> updateUserPartially(@PathVariable(value = "id") Long userId,
      @RequestBody User userDetails) throws ResourceNotFoundException {
    User user = userRepository.findById(userId)
        .orElseThrow(() -> new ResourceNotFoundException("User not found on :: " + userId));

    user.setName(userDetails.getName());
    user.setFirstSurname(userDetails.getFirstSurname());
    user.setSecondSurname(userDetails.getSecondSurname());
    user.setEmail(userDetails.getEmail());
    final User updatedUser = userRepository.save(user);
    return ResponseEntity.ok(updatedUser);
  }

  // This returns a json with the user information
  @GetMapping(path = "/{id}")
  public ResponseEntity<User> findUser(@PathVariable(value = "id") Long userId)
      throws ResourceNotFoundException {
    User user = userRepository.findById(userId)
        .orElseThrow(() -> new ResourceNotFoundException("User not found on : " + userId));
    return ResponseEntity.ok().body(user);
  }

  // Delete

  @DeleteMapping(path = "/user/{id}")
  public @ResponseBody String deleteEmployee(@PathVariable("id") Long id) {
    userRepository.deleteById(id);
    return String.format("User %d deleted", id);

    // You can add the option of returning the deleted user just in case if you want to create some
    // sort of backup
  }

  @GetMapping(path = "/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
